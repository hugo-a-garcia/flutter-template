// Mocks generated by Mockito 5.0.2 from annotations
// in flutter_template/test/di/injectable_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:ui' as _i12;

import 'package:dio/src/adapter.dart' as _i3;
import 'package:dio/src/cancel_token.dart' as _i25;
import 'package:dio/src/dio.dart' as _i24;
import 'package:dio/src/dio_error.dart' as _i15;
import 'package:dio/src/interceptor.dart' as _i5;
import 'package:dio/src/options.dart' as _i2;
import 'package:dio/src/response.dart' as _i6;
import 'package:dio/src/transformer.dart' as _i4;
import 'package:flutter/src/material/app.dart' as _i30;
import 'package:flutter/src/widgets/framework.dart' as _i39;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i22;
import 'package:flutter_template/model/webservice/todo/todo.dart' as _i20;
import 'package:flutter_template/navigator/main_navigation.dart' as _i37;
import 'package:flutter_template/repository/debug/debug_repo.dart' as _i9;
import 'package:flutter_template/repository/locale/locale_repo.dart' as _i11;
import 'package:flutter_template/repository/login/login_repo.dart' as _i13;
import 'package:flutter_template/repository/refresh/refresh_repo.dart' as _i14;
import 'package:flutter_template/repository/secure_storage/auth/auth_storing.dart'
    as _i17;
import 'package:flutter_template/repository/secure_storage/secure_storing.dart'
    as _i16;
import 'package:flutter_template/repository/shared_prefs/local/local_storing.dart'
    as _i19;
import 'package:flutter_template/repository/shared_prefs/shared_prefs_storing.dart'
    as _i18;
import 'package:flutter_template/repository/todo/todo_repo.dart' as _i8;
import 'package:flutter_template/util/connectivity/connectivity_controlling.dart'
    as _i21;
import 'package:flutter_template/util/license.dart' as _i32;
import 'package:flutter_template/util/locale/localization_delegate.dart' as _i7;
import 'package:flutter_template/viewmodel/debug/debug_platform_selector_viewmodel.dart'
    as _i27;
import 'package:flutter_template/viewmodel/debug/debug_viewmodel.dart' as _i28;
import 'package:flutter_template/viewmodel/global/global_viewmodel.dart'
    as _i29;
import 'package:flutter_template/viewmodel/license/license_viewmodel.dart'
    as _i31;
import 'package:flutter_template/viewmodel/login/login_viewmodel.dart' as _i33;
import 'package:flutter_template/viewmodel/splash/splash_viewmodel.dart'
    as _i34;
import 'package:flutter_template/viewmodel/todo/todo_add/todo_add_viewmodel.dart'
    as _i35;
import 'package:flutter_template/viewmodel/todo/todo_list/todo_list_viewmodel.dart'
    as _i36;
import 'package:flutter_template/webservice/todo/todo_service.dart' as _i26;
import 'package:mockito/mockito.dart' as _i1;
import 'package:moor/src/runtime/api/runtime_api.dart' as _i38;
import 'package:shared_preferences/shared_preferences.dart' as _i23;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeBaseOptions extends _i1.Fake implements _i2.BaseOptions {}

class _FakeHttpClientAdapter extends _i1.Fake implements _i3.HttpClientAdapter {
}

class _FakeTransformer extends _i1.Fake implements _i4.Transformer {}

class _FakeInterceptors extends _i1.Fake implements _i5.Interceptors {}

class _FakeResponse<T> extends _i1.Fake implements _i6.Response<T> {}

class _FakeLocalizationDelegate extends _i1.Fake
    implements _i7.LocalizationDelegate {}

class _FakeTodoRepo extends _i1.Fake implements _i8.TodoRepo {}

/// A class which mocks [DebugRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockDebugRepo extends _i1.Mock implements _i9.DebugRepo {
  MockDebugRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<void> saveSlowAnimations({bool? enabled}) => (super.noSuchMethod(
      Invocation.method(#saveSlowAnimations, [], {#enabled: enabled}),
      returnValue: Future.value(null),
      returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  bool isSlowAnimationsEnabled() =>
      (super.noSuchMethod(Invocation.method(#isSlowAnimationsEnabled, []),
          returnValue: false) as bool);
  @override
  _i10.Future<void> saveSelectedPlatform(String? selectedPlatform) =>
      (super.noSuchMethod(
          Invocation.method(#saveSelectedPlatform, [selectedPlatform]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
}

/// A class which mocks [LocaleRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocaleRepo extends _i1.Mock implements _i11.LocaleRepo {
  MockLocaleRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<void> setCustomLocale(_i12.Locale? locale) =>
      (super.noSuchMethod(Invocation.method(#setCustomLocale, [locale]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
}

/// A class which mocks [LoginRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepo extends _i1.Mock implements _i13.LoginRepo {
  MockLoginRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<bool> isLoggedIn() =>
      (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
          returnValue: Future.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<void> login({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#login, [], {#email: email, #password: password}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
}

/// A class which mocks [RefreshRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockRefreshRepo extends _i1.Mock implements _i14.RefreshRepo {
  MockRefreshRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<dynamic> refresh(_i15.DioError? err) =>
      (super.noSuchMethod(Invocation.method(#refresh, [err]),
          returnValue: Future.value(null)) as _i10.Future<dynamic>);
}

/// A class which mocks [SecureStoring].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStoring extends _i1.Mock implements _i16.SecureStoring {
  MockSecureStoring() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<void> deleteAll() =>
      (super.noSuchMethod(Invocation.method(#deleteAll, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> write({String? key, String? value}) => (super.noSuchMethod(
      Invocation.method(#write, [], {#key: key, #value: value}),
      returnValue: Future.value(null),
      returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<String?> read({String? key}) =>
      (super.noSuchMethod(Invocation.method(#read, [], {#key: key}),
          returnValue: Future.value('')) as _i10.Future<String?>);
  @override
  _i10.Future<void> delete({String? key}) =>
      (super.noSuchMethod(Invocation.method(#delete, [], {#key: key}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<bool> containsKey({String? key}) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [], {#key: key}),
          returnValue: Future.value(false)) as _i10.Future<bool>);
}

/// A class which mocks [AuthStoring].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthStoring extends _i1.Mock implements _i17.AuthStoring {
  MockAuthStoring() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<String?> getRefreshToken() =>
      (super.noSuchMethod(Invocation.method(#getRefreshToken, []),
          returnValue: Future.value('')) as _i10.Future<String?>);
  @override
  _i10.Future<String?> getAccessToken() =>
      (super.noSuchMethod(Invocation.method(#getAccessToken, []),
          returnValue: Future.value('')) as _i10.Future<String?>);
  @override
  _i10.Future<void> clear() =>
      (super.noSuchMethod(Invocation.method(#clear, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> saveUserCredentials(
          {String? accessToken, String? refreshToken}) =>
      (super.noSuchMethod(
          Invocation.method(#saveUserCredentials, [],
              {#accessToken: accessToken, #refreshToken: refreshToken}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<bool> hasLoggedInUser() =>
      (super.noSuchMethod(Invocation.method(#hasLoggedInUser, []),
          returnValue: Future.value(false)) as _i10.Future<bool>);
}

/// A class which mocks [SharedPrefsStoring].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPrefsStoring extends _i1.Mock
    implements _i18.SharedPrefsStoring {
  MockSharedPrefsStoring() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<void> saveString({String? key, String? value}) =>
      (super.noSuchMethod(
          Invocation.method(#saveString, [], {#key: key, #value: value}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> saveBoolean({String? key, bool? value}) =>
      (super.noSuchMethod(
          Invocation.method(#saveBoolean, [], {#key: key, #value: value}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> saveInt({String? key, int? value}) => (super.noSuchMethod(
      Invocation.method(#saveInt, [], {#key: key, #value: value}),
      returnValue: Future.value(null),
      returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> saveDouble({String? key, double? value}) =>
      (super.noSuchMethod(
          Invocation.method(#saveDouble, [], {#key: key, #value: value}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
  @override
  bool? getBoolean(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBoolean, [key])) as bool?);
  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);
  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);
  @override
  _i10.Future<void> deleteKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#deleteKey, [key]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
}

/// A class which mocks [LocalStoring].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStoring extends _i1.Mock implements _i19.LocalStoring {
  MockLocalStoring() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<void> checkForNewInstallation() =>
      (super.noSuchMethod(Invocation.method(#checkForNewInstallation, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
}

/// A class which mocks [TodoRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepo extends _i1.Mock implements _i8.TodoRepo {
  MockTodoRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Stream<List<_i20.Todo>> getTodos() =>
      (super.noSuchMethod(Invocation.method(#getTodos, []),
              returnValue: Stream<List<_i20.Todo>>.empty())
          as _i10.Stream<List<_i20.Todo>>);
  @override
  _i10.Future<List<_i20.Todo>> fetchTodos() =>
      (super.noSuchMethod(Invocation.method(#fetchTodos, []),
              returnValue: Future.value(<_i20.Todo>[]))
          as _i10.Future<List<_i20.Todo>>);
  @override
  _i10.Future<void> saveTodo(String? todo) =>
      (super.noSuchMethod(Invocation.method(#saveTodo, [todo]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setTodoState({int? id, bool? value}) => (super.noSuchMethod(
      Invocation.method(#setTodoState, [], {#id: id, #value: value}),
      returnValue: Future.value(null),
      returnValueForMissingStub: Future.value()) as _i10.Future<void>);
}

/// A class which mocks [ConnectivityControlling].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityControlling extends _i1.Mock
    implements _i21.ConnectivityControlling {
  MockConnectivityControlling() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<bool> hasConnection() =>
      (super.noSuchMethod(Invocation.method(#hasConnection, []),
          returnValue: Future.value(false)) as _i10.Future<bool>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i22.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<void> write(
          {String? key,
          String? value,
          _i22.IOSOptions? iOptions = _i22.IOSOptions.defaultOptions,
          _i22.AndroidOptions? aOptions,
          _i22.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#write, [], {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<String?> read(
          {String? key,
          _i22.IOSOptions? iOptions = _i22.IOSOptions.defaultOptions,
          _i22.AndroidOptions? aOptions,
          _i22.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#read, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future.value('')) as _i10.Future<String?>);
  @override
  _i10.Future<bool> containsKey(
          {String? key,
          _i22.IOSOptions? iOptions = _i22.IOSOptions.defaultOptions,
          _i22.AndroidOptions? aOptions,
          _i22.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#containsKey, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<void> delete(
          {String? key,
          _i22.IOSOptions? iOptions = _i22.IOSOptions.defaultOptions,
          _i22.AndroidOptions? aOptions,
          _i22.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<Map<String, String>> readAll(
          {_i22.IOSOptions? iOptions = _i22.IOSOptions.defaultOptions,
          _i22.AndroidOptions? aOptions,
          _i22.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
              Invocation.method(#readAll, [], {
                #iOptions: iOptions,
                #aOptions: aOptions,
                #lOptions: lOptions
              }),
              returnValue: Future.value(<String, String>{}))
          as _i10.Future<Map<String, String>>);
  @override
  _i10.Future<void> deleteAll(
          {_i22.IOSOptions? iOptions = _i22.IOSOptions.defaultOptions,
          _i22.AndroidOptions? aOptions,
          _i22.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteAll, [],
              {#iOptions: iOptions, #aOptions: aOptions, #lOptions: lOptions}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i23.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(Invocation.method(#getKeys, []),
      returnValue: <String>{}) as Set<String>);
  @override
  Object? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);
  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);
  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);
  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);
  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);
  @override
  _i10.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(Invocation.method(#setBool, [key, value]),
          returnValue: Future.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(Invocation.method(#setInt, [key, value]),
          returnValue: Future.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(Invocation.method(#setDouble, [key, value]),
          returnValue: Future.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: Future.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setStringList, [key, value]),
          returnValue: Future.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> remove(String? key) =>
      (super.noSuchMethod(Invocation.method(#remove, [key]),
          returnValue: Future.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> commit() =>
      (super.noSuchMethod(Invocation.method(#commit, []),
          returnValue: Future.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> clear() =>
      (super.noSuchMethod(Invocation.method(#clear, []),
          returnValue: Future.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i24.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BaseOptions get options =>
      (super.noSuchMethod(Invocation.getter(#options),
          returnValue: _FakeBaseOptions()) as _i2.BaseOptions);
  @override
  set options(_i2.BaseOptions? _options) =>
      super.noSuchMethod(Invocation.setter(#options, _options),
          returnValueForMissingStub: null);
  @override
  _i3.HttpClientAdapter get httpClientAdapter =>
      (super.noSuchMethod(Invocation.getter(#httpClientAdapter),
          returnValue: _FakeHttpClientAdapter()) as _i3.HttpClientAdapter);
  @override
  set httpClientAdapter(_i3.HttpClientAdapter? _httpClientAdapter) => super
      .noSuchMethod(Invocation.setter(#httpClientAdapter, _httpClientAdapter),
          returnValueForMissingStub: null);
  @override
  _i4.Transformer get transformer =>
      (super.noSuchMethod(Invocation.getter(#transformer),
          returnValue: _FakeTransformer()) as _i4.Transformer);
  @override
  set transformer(_i4.Transformer? _transformer) =>
      super.noSuchMethod(Invocation.setter(#transformer, _transformer),
          returnValueForMissingStub: null);
  @override
  _i5.Interceptors get interceptors =>
      (super.noSuchMethod(Invocation.getter(#interceptors),
          returnValue: _FakeInterceptors()) as _i5.Interceptors);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i6.Response<T>> get<T>(String? path,
          {Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i25.CancelToken? cancelToken,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [
                path
              ], {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> getUri<T>(Uri? uri,
          {_i2.Options? options,
          _i25.CancelToken? cancelToken,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#getUri, [
                uri
              ], {
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> post<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i25.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> postUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i25.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#postUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> put<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i25.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> putUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i25.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#putUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> head<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i25.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#head, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken
              }),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> headUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i25.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#headUri, [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken}),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> delete<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i25.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken
              }),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> deleteUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i25.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteUri, [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken}),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> patch<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i25.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> patchUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i25.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#patchUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<dynamic>> download(String? urlPath, dynamic savePath,
          {_i2.ProgressCallback? onReceiveProgress,
          Map<String, dynamic>? queryParameters,
          _i25.CancelToken? cancelToken,
          bool? deleteOnError = true,
          String? lengthHeader = r'content-length',
          dynamic data,
          _i2.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(#download, [
                urlPath,
                savePath
              ], {
                #onReceiveProgress: onReceiveProgress,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options
              }),
              returnValue: Future.value(_FakeResponse<dynamic>()))
          as _i10.Future<_i6.Response<dynamic>>);
  @override
  _i10.Future<_i6.Response<dynamic>> downloadUri(Uri? uri, dynamic savePath,
          {_i2.ProgressCallback? onReceiveProgress,
          _i25.CancelToken? cancelToken,
          bool? deleteOnError = true,
          String? lengthHeader = r'content-length',
          dynamic data,
          _i2.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(#downloadUri, [
                uri,
                savePath
              ], {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options
              }),
              returnValue: Future.value(_FakeResponse<dynamic>()))
          as _i10.Future<_i6.Response<dynamic>>);
  @override
  _i10.Future<_i6.Response<T>> request<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i25.CancelToken? cancelToken,
          _i2.Options? options,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#request, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> requestUri<T>(Uri? uri,
          {dynamic data,
          _i25.CancelToken? cancelToken,
          _i2.Options? options,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#requestUri, [
                uri
              ], {
                #data: data,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
  @override
  _i10.Future<_i6.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(Invocation.method(#fetch, [requestOptions]),
              returnValue: Future.value(_FakeResponse<T>()))
          as _i10.Future<_i6.Response<T>>);
}

/// A class which mocks [TodoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoService extends _i1.Mock implements _i26.TodoService {
  MockTodoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<List<_i20.Todo>> getTodos() =>
      (super.noSuchMethod(Invocation.method(#getTodos, []),
              returnValue: Future.value(<_i20.Todo>[]))
          as _i10.Future<List<_i20.Todo>>);
}

/// A class which mocks [DebugPlatformSelectorViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockDebugPlatformSelectorViewModel extends _i1.Mock
    implements _i27.DebugPlatformSelectorViewModel {
  MockDebugPlatformSelectorViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  _i10.Future<void> init(_i27.DebugPlatformSelectorNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  void addListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}

/// A class which mocks [DebugViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockDebugViewModel extends _i1.Mock implements _i28.DebugViewModel {
  MockDebugViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get slowAnimationsEnabled =>
      (super.noSuchMethod(Invocation.getter(#slowAnimationsEnabled),
          returnValue: false) as bool);
  @override
  set slowAnimationsEnabled(bool? _slowAnimationsEnabled) => super.noSuchMethod(
      Invocation.setter(#slowAnimationsEnabled, _slowAnimationsEnabled),
      returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  _i10.Future<void> init(_i28.DebugNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> onSlowAnimationsChanged(bool? enabled) => (super
      .noSuchMethod(Invocation.method(#onSlowAnimationsChanged, [enabled]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  void addListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GlobalViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockGlobalViewModel extends _i1.Mock implements _i29.GlobalViewModel {
  MockGlobalViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i30.ThemeMode get themeMode =>
      (super.noSuchMethod(Invocation.getter(#themeMode),
          returnValue: _i30.ThemeMode.system) as _i30.ThemeMode);
  @override
  _i7.LocalizationDelegate get localeDelegate => (super.noSuchMethod(
      Invocation.getter(#localeDelegate),
      returnValue: _FakeLocalizationDelegate()) as _i7.LocalizationDelegate);
  @override
  bool get showsTranslationKeys =>
      (super.noSuchMethod(Invocation.getter(#showsTranslationKeys),
          returnValue: false) as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  _i10.Future<void> init() => (super.noSuchMethod(Invocation.method(#init, []),
      returnValue: Future.value(null),
      returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> onSwitchToDutch() =>
      (super.noSuchMethod(Invocation.method(#onSwitchToDutch, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> onSwitchToEnglish() =>
      (super.noSuchMethod(Invocation.method(#onSwitchToEnglish, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> onSwitchToSystemLanguage() =>
      (super.noSuchMethod(Invocation.method(#onSwitchToSystemLanguage, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setSelectedPlatformToAndroid() =>
      (super.noSuchMethod(Invocation.method(#setSelectedPlatformToAndroid, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setSelectedPlatformToIOS() =>
      (super.noSuchMethod(Invocation.method(#setSelectedPlatformToIOS, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setSelectedPlatformToDefault() =>
      (super.noSuchMethod(Invocation.method(#setSelectedPlatformToDefault, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  String getCurrentPlatform() =>
      (super.noSuchMethod(Invocation.method(#getCurrentPlatform, []),
          returnValue: '') as String);
  @override
  String getCurrentLanguage() =>
      (super.noSuchMethod(Invocation.method(#getCurrentLanguage, []),
          returnValue: '') as String);
  @override
  bool isLanguageSelected(String? languageCode) => (super.noSuchMethod(
      Invocation.method(#isLanguageSelected, [languageCode]),
      returnValue: false) as bool);
  @override
  void addListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}

/// A class which mocks [LicenseViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockLicenseViewModel extends _i1.Mock implements _i31.LicenseViewModel {
  MockLicenseViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i32.License> get licenses =>
      (super.noSuchMethod(Invocation.getter(#licenses),
          returnValue: <_i32.License>[]) as List<_i32.License>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  _i10.Future<void> init(_i31.LicenseNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  void addListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}

/// A class which mocks [LoginViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginViewModel extends _i1.Mock implements _i33.LoginViewModel {
  MockLoginViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoginEnabled => (super
          .noSuchMethod(Invocation.getter(#isLoginEnabled), returnValue: false)
      as bool);
  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  _i10.Future<void> init(_i33.LoginNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  void onEmailUpdated(String? email) =>
      super.noSuchMethod(Invocation.method(#onEmailUpdated, [email]),
          returnValueForMissingStub: null);
  @override
  void onPasswordUpdated(String? password) =>
      super.noSuchMethod(Invocation.method(#onPasswordUpdated, [password]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> onLoginClicked() =>
      (super.noSuchMethod(Invocation.method(#onLoginClicked, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  void addListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}

/// A class which mocks [SplashViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockSplashViewModel extends _i1.Mock implements _i34.SplashViewModel {
  MockSplashViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  _i10.Future<void> init(_i34.SplashNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  void addListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}

/// A class which mocks [TodoAddViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoAddViewModel extends _i1.Mock implements _i35.TodoAddViewModel {
  MockTodoAddViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.TodoRepo get todoRepo => (super.noSuchMethod(Invocation.getter(#todoRepo),
      returnValue: _FakeTodoRepo()) as _i8.TodoRepo);
  @override
  bool get isSaveEnabled =>
      (super.noSuchMethod(Invocation.getter(#isSaveEnabled), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  _i10.Future<void> init(_i35.TodoAddNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  void onTodoChanged(String? todo) =>
      super.noSuchMethod(Invocation.method(#onTodoChanged, [todo]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> onSaveClicked() =>
      (super.noSuchMethod(Invocation.method(#onSaveClicked, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  void addListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}

/// A class which mocks [TodoListViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoListViewModel extends _i1.Mock implements _i36.TodoListViewModel {
  MockTodoListViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);
  @override
  _i10.Stream<List<_i20.Todo>> get dataStream =>
      (super.noSuchMethod(Invocation.getter(#dataStream),
              returnValue: Stream<List<_i20.Todo>>.empty())
          as _i10.Stream<List<_i20.Todo>>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool get disposed =>
      (super.noSuchMethod(Invocation.getter(#disposed), returnValue: false)
          as bool);
  @override
  _i10.Future<void> init(_i36.TodoListViewNavigator? navigator) =>
      (super.noSuchMethod(Invocation.method(#init, [navigator]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> onDownloadClicked() =>
      (super.noSuchMethod(Invocation.method(#onDownloadClicked, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> onTodoChanged({int? id, bool? value}) =>
      (super.noSuchMethod(
          Invocation.method(#onTodoChanged, [], {#id: id, #value: value}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  void addListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
}

/// A class which mocks [MainNavigation].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainNavigation extends _i1.Mock implements _i37.MainNavigation {
  @override
  void goToDatabase(_i38.GeneratedDatabase? db) =>
      super.noSuchMethod(Invocation.method(#goToDatabase, [db]),
          returnValueForMissingStub: null);
  @override
  void showCustomDialog<T>({_i39.WidgetBuilder? builder}) => super.noSuchMethod(
      Invocation.method(#showCustomDialog, [], {#builder: builder}),
      returnValueForMissingStub: null);
}
