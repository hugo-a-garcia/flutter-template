// Mocks generated by Mockito 5.0.2 from annotations
// in flutter_template/test/util/interceptor/combining_smart_interceptor_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:dio/src/dio_error.dart' as _i6;
import 'package:dio/src/interceptor.dart' as _i2;
import 'package:dio/src/options.dart' as _i4;
import 'package:dio/src/response.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeInterceptorState<T> extends _i1.Fake
    implements _i2.InterceptorState<T> {}

/// A class which mocks [RequestInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestInterceptorHandler extends _i1.Mock
    implements _i2.RequestInterceptorHandler {
  MockRequestInterceptorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.InterceptorState<dynamic>> get future =>
      (super.noSuchMethod(Invocation.getter(#future),
              returnValue: Future.value(_FakeInterceptorState<dynamic>()))
          as _i3.Future<_i2.InterceptorState<dynamic>>);
  @override
  bool get isCompleted =>
      (super.noSuchMethod(Invocation.getter(#isCompleted), returnValue: false)
          as bool);
  @override
  void next(_i4.RequestOptions? requestOptions) =>
      super.noSuchMethod(Invocation.method(#next, [requestOptions]),
          returnValueForMissingStub: null);
  @override
  void resolve(_i5.Response<dynamic>? response,
          [bool? callFollowingResponseInterceptor = false]) =>
      super.noSuchMethod(
          Invocation.method(
              #resolve, [response, callFollowingResponseInterceptor]),
          returnValueForMissingStub: null);
  @override
  void reject(_i6.DioError? error,
          [bool? callFollowingErrorInterceptor = false]) =>
      super.noSuchMethod(
          Invocation.method(#reject, [error, callFollowingErrorInterceptor]),
          returnValueForMissingStub: null);
}

/// A class which mocks [ResponseInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseInterceptorHandler extends _i1.Mock
    implements _i2.ResponseInterceptorHandler {
  MockResponseInterceptorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.InterceptorState<dynamic>> get future =>
      (super.noSuchMethod(Invocation.getter(#future),
              returnValue: Future.value(_FakeInterceptorState<dynamic>()))
          as _i3.Future<_i2.InterceptorState<dynamic>>);
  @override
  bool get isCompleted =>
      (super.noSuchMethod(Invocation.getter(#isCompleted), returnValue: false)
          as bool);
  @override
  void next(_i5.Response<dynamic>? response) =>
      super.noSuchMethod(Invocation.method(#next, [response]),
          returnValueForMissingStub: null);
  @override
  void resolve(_i5.Response<dynamic>? response) =>
      super.noSuchMethod(Invocation.method(#resolve, [response]),
          returnValueForMissingStub: null);
  @override
  void reject(_i6.DioError? error,
          [bool? callFollowingErrorInterceptor = false]) =>
      super.noSuchMethod(
          Invocation.method(#reject, [error, callFollowingErrorInterceptor]),
          returnValueForMissingStub: null);
}

/// A class which mocks [ErrorInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorInterceptorHandler extends _i1.Mock
    implements _i2.ErrorInterceptorHandler {
  MockErrorInterceptorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.InterceptorState<dynamic>> get future =>
      (super.noSuchMethod(Invocation.getter(#future),
              returnValue: Future.value(_FakeInterceptorState<dynamic>()))
          as _i3.Future<_i2.InterceptorState<dynamic>>);
  @override
  bool get isCompleted =>
      (super.noSuchMethod(Invocation.getter(#isCompleted), returnValue: false)
          as bool);
  @override
  void next(_i6.DioError? err) =>
      super.noSuchMethod(Invocation.method(#next, [err]),
          returnValueForMissingStub: null);
  @override
  void resolve(_i5.Response<dynamic>? response) =>
      super.noSuchMethod(Invocation.method(#resolve, [response]),
          returnValueForMissingStub: null);
  @override
  void reject(_i6.DioError? error) =>
      super.noSuchMethod(Invocation.method(#reject, [error]),
          returnValueForMissingStub: null);
}
