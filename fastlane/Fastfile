fastlane_version “2.195.0”
xcode_path = "/Applications/Xcode.app"

# Don't generate README files.
skip_docs

# Select specific xcode
#xcode_select(xcode_path)

# Install provisioning pro
install_provisioning_profiles

# Make sure all changes are committed.
before_all do |lane|
 clean_build_artifacts
end

keychain_password = ENV[‘JENKINS_KEYCHAIN_PASSWORD’]
unlock_keychain(path: ‘login.keychain’, password: keychain_password) if is_ci? && keychain_password

#####################
### CONFIGURATION ###
#####################
# AppStore Configuration
APP_STORE_USERNAME = ''
APP_STORE_TEAM_NAME = ''
APP_STORE_TEAM_ID = ''
ENV['FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD'] = ''

# iOS Configuration
WORKSPACE = 'ios/Runner.xcworkspace'

#Build Configuration
BUMP_BUILD_NR = 10
BUILD_NR = ENV["BUILD_NUMBER"] || ''

if BUILD_NR == ''
  BUILD_NR = 1
  sh("echo","No build nr set, USING DEFAULT (1)")
else
  BUILD_NR = Integer(BUILD_NR) + BUMP_BUILD_NR
  sh("echo","New build nr: #{BUILD_NR}")
end

####################
### PUBLIC LANES ###
####################
lane :pr do
  installFvmVersion

  Dir.chdir ".." do
    sh("mv", "analysis_options.yaml", "fastlane/analysis_options_original.yaml")
    sh("cp", "fastlane/analysis_options_all_files.yaml", "analysis_options.yaml")
    sh("fvm", "flutter", "analyze")
    sh("mv", "fastlane/analysis_options_original.yaml", "analysis_options.yaml")
    sh("fvm", "flutter", "analyze")
    sh("fvm", "flutter", "test")
    #sh("fvm", "flutter", "test", "--coverage")
    #sh("dart", "--version")
    #sh("dart", "coverage/filter_test_coverage.dart")
    #sh("python3", "coverage/lcov_cobertura.py", "coverage/lcov.info", "--output", "coverage/coverage.xml")
  end
end

lane :ci_alpha do
    ensure_git_status_clean
    pr
    sh("git", "reset", "--hard")
    alpha_android
    alpha_ios_build
end

lane :ci_beta do
    ensure_git_status_clean
    pr
    sh("git", "reset", "--hard")
    beta_android
    beta_ios_build
end

lane :ci_prod do
    ensure_git_status_clean
    pr
    sh("git", "reset", "--hard")
    prod_android
    prod_ios_build
end

lane :alpha_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  buildAppAndroid(flavor: 'alpha')
  uploadToAppcenterAndroid(flavor: 'alpha') # Deploy the apk to AppCenter.
end

lane :beta_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  buildAppAndroid(flavor: 'beta')
  uploadToAppcenterAndroid(flavor: 'beta') # Deploy the apk to AppCenter.
end

lane :prod_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  buildAppBundleAndroid(flavor: 'prod')
  deployToPlayStore(flavor: 'prod', package_name: 'com.icapps.fluttertemplate')
  add_tag                 # Add tag
end

lane :alpha_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  alpha_ios_build
end

private_lane :alpha_ios_build do
  buildAppIOSOnly(flavor: 'alpha')
  uploadToAppcenterIos(flavor: 'alpha') # Deploy the apk to AppCenter.
end

lane :beta_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  beta_ios_build
end

private_lane :beta_ios_build do
  buildAppIOSOnly(flavor: 'beta')
  uploadToAppcenterIos(flavor: 'beta') # Deploy the apk to AppCenter.
end

lane :prod_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  prod_ios_build
  add_tag                 # Add tag
end

private_lane :prod_ios_build do
  buildAppIOSOnly(flavor: 'prod')
  sh("echo","Enter `apple_id` in the prod_ios_build lane")
  #buildAndDeployToAppStore(flavor: 'prod', configuration: 'Release-prod', identifier: 'com.icapps.fluttertemplate', apple_id: '')
end

########################
###   PRIVATE LANES  ###
########################
private_lane :installFvmVersion do
    Dir.chdir ".." do
      sh("bash", "./tool/install_fvm.sh")
    end
end

private_lane :prepareBuild do
    Dir.chdir ".." do
      sh("fvm", "flutter", "packages", "get")
      sh("fvm", "flutter", "clean")
    end
end

private_lane :buildAppAndroid do |options|
    Dir.chdir ".." do
      sh("fvm", "flutter", "build", "apk", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--obfuscate", "--split-debug-info=./build/debug-info/#{options[:flavor]}", "--build-number=#{BUILD_NR}")    # Build the application (APK)
    end
    Dir.chdir "../build/debug-info/#{options[:flavor]}" do
      zip(
        path: "./",
        include: ["**/app.android-*"],
        output_path: "AndroidSymbols.zip"
      )
    end
    upload_artifacts_to_s3(flavor: options[:flavor])
end

private_lane :buildAppBundleAndroid do |options|
    Dir.chdir ".." do
      sh("fvm", "flutter", "build", "appbundle", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--obfuscate", "--split-debug-info=./build/debug-info/#{options[:flavor]}", "--build-number=#{BUILD_NR}")    # Build the application (AAB)
    end
    Dir.chdir "../build/debug-info/#{options[:flavor]}" do
      zip(
        path: "./",
        include: ["**/app.android-*"],
        output_path: "AndroidSymbols.zip"
      )
    end
    upload_artifacts_to_s3(flavor: options[:flavor])
end

private_lane :buildAppIOSOnly do |options|
    Dir.chdir ".." do
      podRepoUpdate
      sh("fvm", "flutter", "build", "ios", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--no-codesign", "--obfuscate", "--split-debug-info=./build/debug-info/#{options[:flavor]}", "--build-number=#{BUILD_NR}")    # Build the application
    end
    Dir.chdir "../build" do
      zip(
        path: "./",
        include: ["**/debug-info/#{options[:flavor]}/app.ios-*", "**/ios/Release-#{options[:flavor]}-iphoneos/Runner.app.dSYM/*"],
        output_path: "iOSSymbols.zip"
      )
    end
    upload_artifacts_to_s3(flavor: options[:flavor])
end

private_lane :podRepoUpdate do |options|
      Dir.chdir "ios" do
        sh("pod", "repo", "update")
      end
end

private_lane :add_tag do
  add_git_tag(build_number: BUILD_NR)
end

private_lane :buildAndDeployToAppStore do |options|
  buildIosAppStore options
  deployToAppStore options
end

private_lane :buildIosAppStore do |options|
    gym(
      workspace:     WORKSPACE,
      scheme:        options[:flavor],
      configuration: options[:configuration],
      clean:         true,
      export_options: {
        method: 'app-store',
        provisioningProfiles: {
            "com.icapps.fluttertemplate.dev" => "Flutter Template Debug",
            "com.icapps.fluttertemplate.alpha" => "Flutter Template Alpha",
            "com.icapps.fluttertemplate.beta" => "Flutter Template Beta",
            "com.icapps.fluttertemplate" => "Flutter Template Production"
        }
      }
    )
end

private_lane :deployToAppStore do |options|
  pilot(
    username:                          APP_STORE_USERNAME,
    team_name:                         APP_STORE_TEAM_NAME,
    team_id:                           APP_STORE_TEAM_ID,
    app_identifier:                    options[:identifier],
    apple_id:                          options[:apple_id],
    skip_submission:                   true,
    skip_waiting_for_build_processing: true,
  )
  uploadSymbols()
end

private_lane :deployToPlayStore do |options|
  upload_to_play_store(
    package_name: options[:package_name],
    track: 'internal',
    release_status: 'draft', #completed
    aab: "./build/app/outputs/bundle/#{options[:flavor]}Release/app-#{options[:flavor]}-release.aab",
    json_key: 'google_playstore_api.json'
  )
end

private_lane :uploadSymbols do
  Dir.chdir ".." do
       sh("ios/Pods/FirebaseCrashlytics/upload-symbols", "-gsp" ,"ios/Runner/GoogleService-Info.plist", "-p", "ios", "Runner.app.dSYM.zip")    # Upload dSYM files to crashlytics
  end
end

private_lane :upload_artifacts_to_s3 do |options|
    Dir.chdir "../tool/s3/dart_s3_executor/" do
        sh("./tool/packages_get.sh")
    end
    sh("fvm", "dart", "run", "../tool/s3/dart_s3_executor/bin/main.dart", "#{BUILD_NR}", options[:flavor], "../tool/s3/s3.sh", "be-informed")
end
